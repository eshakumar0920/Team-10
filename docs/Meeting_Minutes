Team leader will update the week's meeting minutes here. The Meeting Minutes should provide an overall summary of what was discussed during each weekly meeting.

Week 1 - 2.14.25
Attendees: Prof Alagar, TA Thenn, Team 10 (entire team)
Note Taker: Sophia
Team Leader: Patrick
  Summary:
  Comments:
    -Project Proposal looked good and is very detailed
  TODO:
    -Modify Projecc Timeline from Phases -> Sprints
    -Organize tasks in Timeline into F/E, B/E, and General
    -Create System Architecture Diagram by next week

Week 2 - 2.21.25
Attendees: TA Thenn, Team 10 (entire team)
Note Taker: Sophia
Team Leader: Patrick
  Comments:
    -Overall current progress looks good
    -Postman API may be helpful for testing
    -Figma has feature to auto export designs into working code (CSS, HTML, or JS)
    -Make plans to integrate front-end and back-end in next 3-4 weeks
  TODO:
    -Each member should include hours worked on Weekly Progress Report (goal is 10hrs/wk)
    -Continue to add tasks to Jira board to plan ahead
    -Add bullet points on future Meeting Minutes
    -Create separate directory (called Documents) for Meeting Minutes and Weekly Progress Reports

Week 3 - 2.28.25
Attendees: TA Thenn, Team 10 (entire team)
Note Taker: Sophia
Team Leader: Patrick
  Comments:
    - Format for presenting:
    - Tasks done in the past few weeks
    - High level overview
    - Research: Show him how you're researching (ex: playing around with an API and showing the input & output)
    - at the end show him the progress report
    - Ngrok VM frontend and backend simultaneously 
    - Maybe use UTD virtual machine (runs nonstop, free, setup infrastructure)
    - Research postgres sql commands
    - Installing an emulator like Android studio, XCode, or local machine for testing out application
    - Update in proposal plan from React to React Native
    - MapBox open source map API for map screen
  TODO:
    - Middle of next week send TA message on virtual machine decision
    - Show database tables by next week
    - Upload draw.io diagrams to github
    - Work 7- 10 hrs closer to 8hrs

Week 4 - 3.07.25
  Attendees: Professor Alagar, TA Thenn, Team 10 (entire team)
  Note Taker: Esha
  Team Leader: Sophia 

  TO DO:
    - Work 10 hours
    - Set up the database and add more information
    - Front end move to react native locally
    - Have more to demo next time

Week 5 - 03.14.25
  Attendees: TA Thenn, Team 10 (entire team)
  Note Taker: Esha
  Team Leader: Sai Neethu Bonagiri
  Comments:
    - Need to finalize frontend screens based on Figma designs to ensure smooth integration.
    - Look into loveable for more features
    - Descision on authentication: Flask login vs Firebase(Firebase preferred), but also consider Auth0 and Supabase
    - QR code check-in system similar to the UTD app - need to finalize approach
    - Ensure search filter functionality is not case-senstive. 
    - Need to plan the leveling system(25 levels) and determine how it will display.
    - Consistent Jira updates required. 
  
  TO DO: 
    - Create remaining screens based on Figma designs.
    - Integrate Loveable with ExpoGo.
    - Implement 25 levels for students based on event attendance.
    - Set up a QR code check-in system(or research about it)
    - Sketch/design the leveling system screen.
    - Implement event creation and sorting by category
    - Ensure search functionality is not case-sensitive. 
    - Decide between Flask login, Firebase(preferred), Supabase, or Auth0
    - Update Jira Weekly.

Week 6 - 03.28.25
  Attendees: Professor Alagar, TA Thenn, Team 10 (entire team)
  Note Taker: Sophia
  Team Leader: Sai Neethu Bonagiri
  Comments:
    - Discussion on working through any remaining features, after finishing the tasks ahead of schedule
    - Anything left unfinished by the end of the semester can be labeled as "work to be continued" for future reference. 
    - Focus on any additional features that can be added if the teams finish their current tasks early. These can be explored further if time permits. 
  
  TO DO: 
    - Test authentication, event creation, and leveling systems to ensure everything works seamlessly
    - Continue implementation in the backend
    - Ensure all screens are final on the frontend, and work on integration with backend
    - Test and fine tune level syestem for users.
    - Explore any new features or improvements for the app.


Week 7 - 04.04.25
Attendees: Professor Alagar, TA Thenn, Team 10 (entire team)
Note Taker: Sophia
Team Leader: Esha Kumar
Comments:
  - When testing Supabase, cover all error cases for verification
  - Front end has an app‑router; components must always check user validity
  - Green indicators for XP and leaderboard should be visible
  - User levels need to be persisted in the database
  - Review pgAdmin’s schema dialog for guidance on table design:
  - Follow ER‑model concepts to simplify and normalize database tables
  - Final report due May 9 or May 11; prepare an initial draft before the demo and add more sections as needed

TO DO: 
  - Go over Leaflet.js documentation and examples
  - Create the gaming screen prototype
  - Apply ER‑based database design to simplify table structure


Week 8: 04.11.25
Attendees: Professor Alagar, TA Thenn, Team 10 (entire team)
Note Taker: Sophia
Team Leader: Esha Kumar
Comments:
  - Need a commercial‑style demo to effectively pitch our product
  - Plan and produce a short video walkthrough for the demo
  - Need to add categories to the event‑creation process

TO DO: 
  - Research how to package/make the app downloadable for live demo
  - Add drop‑shadows to the “verification sent” pop‑up to make it more prominent
  - Implement “current location” display on the map
  - Implement QR‑code generation and award XP upon correct scan

Stretch Goals:
  - Have a complete app available for download on a real phone for the demo
  - Prepare both an emulator and a physical device for showcasing



Week 9: 04.18.25
Attendees: TA Thenn, Team 10 (entire team)
Note Taker: Sophia
Team Leader: Esha Kumar
Comments: 
  - The demo should be treated like a commercial showcasing the app's key features in a polished and concise manner.
  - It's recommended to pre-record the demo as screen-sharing live during the demo may be difficult
  - The live app should be used for the demo rather than an emulator to show the full functionality.
  - The current progress exceeds expectations, but it's important to ensure all code is pushed to the main branch.
  - Emphasized that the status report, Jira, and meeting minutes need to be up-to-date with proper metadata. 

TODO:
  - Research best practices for demoing our app effectively.
  - Prepare a 3-4 slide slideshow, including architectural diagrams.
  - Pre-record the demo to ensure smooth delivery.
  - Allocate the last 2 minutes of the demo for a Q&A session.
  - Ensure all code is pushed to the main branch.
  - Keep the status report and Jira board up to date, with proper metadata. 

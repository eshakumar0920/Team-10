"""Add leveling system columns

Revision ID: [will be generated by Alembic]
Revises: [previous revision ID]
Create Date: [current date]

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic
revision = '[will be generated by Alembic]'
down_revision = '[previous revision ID]'
branch_labels = None
depends_on = None

def upgrade():
    # Add new columns to the levels table
    op.add_column('levels', sa.Column('level_xp', sa.Integer(), nullable=True))
    op.add_column('levels', sa.Column('total_xp', sa.Integer(), nullable=True))
    op.add_column('levels', sa.Column('tier', sa.Integer(), nullable=True))
    
    # Add new columns to the users table
    op.add_column('users', sa.Column('last_event_date', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('active_weeks_streak', sa.Integer(), nullable=True, server_default='0'))
    op.add_column('users', sa.Column('current_semester', sa.String(20), nullable=True))
    op.add_column('users', sa.Column('current_tier', sa.Integer(), nullable=True, server_default='1'))
    
    # Create the new tables for the leveling system
    
    # User interactions table
    op.create_table('user_interactions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('other_user_id', sa.Integer(), nullable=False),
        sa.Column('event_id', sa.Integer(), nullable=False),
        sa.Column('interaction_date', sa.DateTime(), nullable=True),
        sa.Column('semester', sa.String(20), nullable=True),
        sa.ForeignKeyConstraint(['event_id'], ['events.id'], ),
        sa.ForeignKeyConstraint(['other_user_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'other_user_id', 'event_id', name='unique_interaction')
    )
    
    # Semesters table
    op.create_table('semesters',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(50), nullable=False),
        sa.Column('start_date', sa.DateTime(), nullable=False),
        sa.Column('end_date', sa.DateTime(), nullable=False),
        sa.Column('is_active', sa.Boolean(), default=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    
    # Loot box types table
    op.create_table('loot_box_types',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(50), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('tier', sa.Integer(), nullable=True, default=1),
        sa.Column('icon_url', sa.String(255), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Loot boxes table
    op.create_table('loot_boxes',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('type_id', sa.Integer(), nullable=False),
        sa.Column('is_opened', sa.Boolean(), default=False),
        sa.Column('awarded_at', sa.DateTime(), default=sa.func.now()),
        sa.Column('opened_at', sa.DateTime(), nullable=True),
        sa.Column('awarded_for', sa.String(100), nullable=True),
        sa.ForeignKeyConstraint(['type_id'], ['loot_box_types.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Add semester column to events table
    op.add_column('events', sa.Column('semester', sa.String(20), nullable=True))


def downgrade():
    # Drop the new tables
    op.drop_table('loot_boxes')
    op.drop_table('loot_box_types')
    op.drop_table('semesters')
    op.drop_table('user_interactions')
    
    # Remove semester column from events
    op.drop_column('events', 'semester')
    
    # Remove new columns from users
    op.drop_column('users', 'current_tier')
    op.drop_column('users', 'current_semester')
    op.drop_column('users', 'active_weeks_streak')
    op.drop_column('users', 'last_event_date')
    
    # Remove new columns from levels
    op.drop_column('levels', 'tier')
    op.drop_column('levels', 'total_xp')
    op.drop_column('levels', 'level_xp')
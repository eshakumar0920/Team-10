"""Add normalized table alongside original tables

Revision ID: 4c6dae6e9c2c
Revises: reward_system_migration
Create Date: 2025-04-04 17:22:02.314888

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4c6dae6e9c2c'
down_revision = 'reward_system_migration'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('loot_box_level_ranges',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('level_min', sa.Integer(), nullable=False),
    sa.Column('level_max', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reward_box_tiers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('loot_box_tier', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('loot_box_tier')
    )
    op.create_table('loot_box_tier_rates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('level_range_id', sa.Integer(), nullable=False),
    sa.Column('tier', sa.Integer(), nullable=False),
    sa.Column('rate', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['level_range_id'], ['loot_box_level_ranges.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('level_range_id', 'tier', name='unique_loot_box_tier_rate')
    )
    op.create_table('reward_tier_rates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('box_tier_id', sa.Integer(), nullable=False),
    sa.Column('tier', sa.Integer(), nullable=False),
    sa.Column('rate', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['box_tier_id'], ['reward_box_tiers.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('box_tier_id', 'tier', name='unique_reward_tier_rate')
    )
    with op.batch_alter_table('levels', schema=None) as batch_op:
        batch_op.alter_column('total_xp',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('tier',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_column('level_xp')
        batch_op.drop_column('xp_required')

    with op.batch_alter_table('loot_boxes', schema=None) as batch_op:
        batch_op.alter_column('awarded_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
        batch_op.alter_column('opened_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)

    with op.batch_alter_table('semesters', schema=None) as batch_op:
        batch_op.alter_column('start_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
        batch_op.alter_column('end_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)

    with op.batch_alter_table('user_activities', schema=None) as batch_op:
        batch_op.alter_column('timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)

    with op.batch_alter_table('user_interactions', schema=None) as batch_op:
        batch_op.alter_column('interaction_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)

    with op.batch_alter_table('user_rewards', schema=None) as batch_op:
        batch_op.alter_column('acquired_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('join_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('last_event_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
        batch_op.drop_column('current_tier')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('current_tier', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.alter_column('last_event_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
        batch_op.alter_column('join_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))

    with op.batch_alter_table('user_rewards', schema=None) as batch_op:
        batch_op.alter_column('acquired_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('user_interactions', schema=None) as batch_op:
        batch_op.alter_column('interaction_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)

    with op.batch_alter_table('user_activities', schema=None) as batch_op:
        batch_op.alter_column('timestamp',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)

    with op.batch_alter_table('semesters', schema=None) as batch_op:
        batch_op.alter_column('end_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
        batch_op.alter_column('start_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)

    with op.batch_alter_table('loot_boxes', schema=None) as batch_op:
        batch_op.alter_column('opened_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
        batch_op.alter_column('awarded_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)

    with op.batch_alter_table('levels', schema=None) as batch_op:
        batch_op.add_column(sa.Column('xp_required', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('level_xp', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.alter_column('tier',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('total_xp',
               existing_type=sa.INTEGER(),
               nullable=True)

    op.drop_table('reward_tier_rates')
    op.drop_table('loot_box_tier_rates')
    op.drop_table('reward_box_tiers')
    op.drop_table('loot_box_level_ranges')
    # ### end Alembic commands ###
